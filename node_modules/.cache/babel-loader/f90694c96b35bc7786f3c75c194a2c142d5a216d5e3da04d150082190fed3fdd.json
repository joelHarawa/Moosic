{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joel\\\\WebstormProjects\\\\Moosic\\\\client\\\\src\\\\components\\\\SearchMood.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet moodData = require(\"./moods.json\");\nconst Input = styled.input`\n  background-color: #0E0B16;\n  color: #A239CA;\n  border: none;\n  width: 100%;\n  font-size: 25px;\n  padding-top: 20px;\n  outline: none;\n`;\n_c = Input;\nconst Dropdown = styled.ul`\n    list-style: none;\n    padding-left: 0;\n`;\n_c2 = Dropdown;\nconst Result = styled.li`\n    color: #A239CA;\n    text-decoration: none;\n    font-size: 18px;\n    padding: 2px;\n    margin: 0;\n    &:hover {\n      color: white;\n      cursor: pointer;\n      background-color: #4717F6;\n    }\n`;\n_c3 = Result;\nconst SearchMood = () => {\n  _s();\n  const [userID, setUserID] = useState(\"\");\n  const token = window.localStorage.getItem(\"token\");\n  const trackURI = 'https://open.spotify.com/track/6DCZcSspjsKoFjzjrWoCdn?si=10a941887a914fba';\n  useEffect(() => {\n    if (token) {\n      fetch(\"https://api.spotify.com/v1/me\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(response => response.json()).then(data => {\n        setUserID(data.id);\n      }).catch(error => {\n        console.error(\"Error fetching user data:\", error);\n      });\n    }\n  }, [token]);\n  const searchFunction = () => {\n    const playlistData = {\n      name: \"My Mood Playlist\",\n      description: \"A playlist based on my current mood\",\n      public: false\n    };\n    fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(playlistData)\n    }).then(response => response.json()).then(data => {\n      console.log('Playlist created:', data);\n      fetch(`https://api.spotify.com/v1/playlists/${data.id}/tracks?uris=${trackURI}`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(response => response.json()).then(data => {\n        console.log('Track added to playlist:', data);\n        // Handle the track addition response\n      }).catch(error => {\n        console.error('Error adding track to playlist:', error);\n        // Handle errors\n      });\n      // Handle the playlist creation response\n    }).catch(error => {\n      console.error('Error creating playlist:', error);\n      // Handle errors\n    });\n  };\n\n  const authorizeSpotify = () => {\n    const clientId = 'YOUR_CLIENT_ID';\n    const redirectUri = 'YOUR_REDIRECT_URI';\n    const scope = 'playlist-modify-private'; // or 'playlist-modify-public' for public playlists\n\n    const authorizationUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&redirect_uri=${encodeURIComponent(redirectUri)}&scope=${encodeURIComponent(scope)}`;\n    window.location.href = authorizationUrl;\n  };\n  const [searchInput, setSearchInput] = useState(\"\");\n  const handleSearch = event => {\n    setSearchInput(event.target.value);\n  };\n  const filteredMoods = moodData.moods.filter(mood => mood.toLowerCase().includes(searchInput.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      placeholder: \"Enter your mood\",\n      value: searchInput,\n      onChange: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), searchInput.length > 0 && /*#__PURE__*/_jsxDEV(Dropdown, {\n      children: filteredMoods.map((mood, index) => /*#__PURE__*/_jsxDEV(Result, {\n        onClick: searchFunction,\n        children: mood\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 9\n  }, this);\n};\n_s(SearchMood, \"E12ZTZSfs8S47fmIrCTdbT4YdaI=\");\n_c4 = SearchMood;\nexport default SearchMood;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Input\");\n$RefreshReg$(_c2, \"Dropdown\");\n$RefreshReg$(_c3, \"Result\");\n$RefreshReg$(_c4, \"SearchMood\");","map":{"version":3,"names":["React","useEffect","useState","styled","jsxDEV","_jsxDEV","moodData","require","Input","input","_c","Dropdown","ul","_c2","Result","li","_c3","SearchMood","_s","userID","setUserID","token","window","localStorage","getItem","trackURI","fetch","headers","Authorization","then","response","json","data","id","catch","error","console","searchFunction","playlistData","name","description","public","method","body","JSON","stringify","log","authorizeSpotify","clientId","redirectUri","scope","authorizationUrl","encodeURIComponent","location","href","searchInput","setSearchInput","handleSearch","event","target","value","filteredMoods","moods","filter","mood","toLowerCase","includes","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","length","map","index","onClick","_c4","$RefreshReg$"],"sources":["C:/Users/Joel/WebstormProjects/Moosic/client/src/components/SearchMood.js"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nlet moodData = require(\"./moods.json\");\r\n\r\nconst Input = styled.input`\r\n  background-color: #0E0B16;\r\n  color: #A239CA;\r\n  border: none;\r\n  width: 100%;\r\n  font-size: 25px;\r\n  padding-top: 20px;\r\n  outline: none;\r\n`;\r\n\r\nconst Dropdown = styled.ul`\r\n    list-style: none;\r\n    padding-left: 0;\r\n`;\r\n\r\nconst Result = styled.li`\r\n    color: #A239CA;\r\n    text-decoration: none;\r\n    font-size: 18px;\r\n    padding: 2px;\r\n    margin: 0;\r\n    &:hover {\r\n      color: white;\r\n      cursor: pointer;\r\n      background-color: #4717F6;\r\n    }\r\n`;\r\n\r\n\r\n\r\nconst SearchMood = () => {\r\n    const [userID, setUserID] = useState(\"\");\r\n    const token = window.localStorage.getItem(\"token\");\r\n\r\n    const trackURI = 'https://open.spotify.com/track/6DCZcSspjsKoFjzjrWoCdn?si=10a941887a914fba';\r\n\r\n\r\n    useEffect(() => {\r\n        if (token) {\r\n            fetch(\"https://api.spotify.com/v1/me\", {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            })\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                    setUserID(data.id);\r\n                })\r\n                .catch((error) => {\r\n                    console.error(\"Error fetching user data:\", error);\r\n                })\r\n        }\r\n    }, [token]);\r\n\r\n\r\n    const searchFunction = () => {\r\n        const playlistData = {\r\n            name: \"My Mood Playlist\",\r\n            description: \"A playlist based on my current mood\",\r\n            public: false\r\n        }\r\n\r\n        fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\r\n            method: 'POST',\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(playlistData)\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log('Playlist created:', data);\r\n\r\n                fetch(`https://api.spotify.com/v1/playlists/${data.id}/tracks?uris=${trackURI}`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`\r\n                    }\r\n                })\r\n                    .then(response => response.json())\r\n                    .then(data => {\r\n                        console.log('Track added to playlist:', data);\r\n                        // Handle the track addition response\r\n                    })\r\n                    .catch(error => {\r\n                        console.error('Error adding track to playlist:', error);\r\n                        // Handle errors\r\n                    });\r\n                // Handle the playlist creation response\r\n            })\r\n\r\n\r\n            .catch(error => {\r\n                console.error('Error creating playlist:', error);\r\n                // Handle errors\r\n            });\r\n    }\r\n\r\n    const authorizeSpotify = () => {\r\n        const clientId = 'YOUR_CLIENT_ID';\r\n        const redirectUri = 'YOUR_REDIRECT_URI';\r\n        const scope = 'playlist-modify-private'; // or 'playlist-modify-public' for public playlists\r\n\r\n        const authorizationUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&redirect_uri=${encodeURIComponent(redirectUri)}&scope=${encodeURIComponent(scope)}`;\r\n\r\n        window.location.href = authorizationUrl;\r\n    };\r\n\r\n    const [searchInput, setSearchInput] = useState(\"\");\r\n\r\n    const handleSearch = (event) => {\r\n        setSearchInput(event.target.value);\r\n    }\r\n\r\n    const filteredMoods = moodData.moods.filter((mood) =>\r\n        mood.toLowerCase().includes(searchInput.toLowerCase())\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <Input\r\n                type=\"text\"\r\n                placeholder=\"Enter your mood\"\r\n                value={searchInput}\r\n                onChange={handleSearch}\r\n            />\r\n            {searchInput.length > 0 && (\r\n            <Dropdown>\r\n                {filteredMoods.map((mood, index) => (\r\n                    <Result onClick={searchFunction} key={index}>{mood}</Result>\r\n                ))}\r\n            </Dropdown>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchMood;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}